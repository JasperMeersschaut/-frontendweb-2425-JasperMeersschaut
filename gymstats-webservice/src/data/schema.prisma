generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  name      String
  lastName  String
  email     String   @unique
  sex       String
  birthdate DateTime @db.DateTime(0)
  length    Int
  weight    Float

  userWorkouts UserWorkout[]
}

model Workout {
  id          Int    @id @default(autoincrement()) @db.UnsignedInt
  type        String
  duration    Int
  muscleFocus String

  exerciseWorkouts Exercise_Workout[]
  userWorkouts     UserWorkout[]
}

model Exercise_Workout {
  EID Int @db.UnsignedInt
  WID Int @db.UnsignedInt

  exercise Exercise @relation(fields: [EID], references: [id])
  workout  Workout  @relation(fields: [WID], references: [id])

  @@id([EID, WID])
}

model Exercise {
  id          Int    @id @default(autoincrement()) @db.UnsignedInt
  type        String
  muscleGroup String

  exerciseWorkouts Exercise_Workout[]
  ExerciseDetail   ExerciseDetail[]
}

model UserWorkout {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  user      User     @relation(fields: [id], references: [id])
  userId    Int      @db.UnsignedInt
  workout   Workout  @relation(fields: [workoutId], references: [id])
  workoutId Int      @db.UnsignedInt
  date      DateTime @default(now())
  notes     String?

  exerciseDetails ExerciseDetail[]
}

model ExerciseDetail {
  id            Int         @id @default(autoincrement()) @db.UnsignedInt
  userWorkout   UserWorkout @relation(fields: [userWorkoutId], references: [id])
  userWorkoutId Int         @db.UnsignedInt
  exercise      Exercise    @relation(fields: [exerciseId], references: [id])
  exerciseId    Int         @db.UnsignedInt
  reps          Int
  sets          Int
  weight        Float?
}
